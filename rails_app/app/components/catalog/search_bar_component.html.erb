<%
  # Copied from Blacklight v8.11.0
  # Adapted for the search box to be customized.
  # - "Find it" button label
  # - Center search box
  # - Rename advanced search link to match page heading
%>

<search>
  <pennlibs-autocomplete for="query_input">
    <div slot="start">
      <%= form_with url: @url, local: true, method: @method, class: @classes.join(' '), scope: @prefix, role: 'search', **@form_options do |f| %>
        <%= render Blacklight::HiddenSearchStateComponent.new(params: @params) %>
        <% if search_fields.length > 1 %>
          <%= f.label :search_field, scoped_t('search_field.label'), class: 'sr-only visually-hidden' %>
        <% end %>
        <% before_input_groups.each do |input_group| %>
          <%= input_group %>
        <% end %>
        <div class="input-group">
          <%= prepend %>

          <% if search_fields.length > 1 %>
            <%= f.select(:search_field,
                        options_for_select(search_fields, h(@search_field)),
                        {},
                        title: scoped_t('search_field.title'),
                        class: "custom-select form-select search-field") %>
          <% elsif search_fields.length == 1 %>
            <%= f.hidden_field :search_field, value: search_fields.first.last %>
          <% end %>

          <%= f.label @query_param, scoped_t('search.label'), class: 'sr-only visually-hidden' %>
          <% if autocomplete_path.present? %>
            <auto-complete src="<%= autocomplete_path %>" for="autocomplete-popup" class="search-autocomplete-wrapper">
              <%= f.search_field @query_param, value: @q, class: "search-q q form-control rounded-#{search_fields.length > 1 ? '0' : 'left'}",
                autofocus: @autofocus,
                aria: { label: scoped_t('search.label'), autocomplete: 'list', controls: 'autocomplete-popup' } 
              %>
              <ul id="autocomplete-popup" class="dropdown-menu" role="listbox" aria-label="<%= scoped_t('search.label') %>" hidden></ul>
            </auto-complete>
          <% else %>
            <%= f.search_field @query_param, value: @q, class: "search-q q form-control rounded-#{search_fields.length > 1 ? '0' : 'left'}",
              autofocus: @autofocus,
              autocomplete: 'off',
              aria: { label: scoped_t('search.label') },
              id: 'query_input'
            %>
          <% end %>

          <%= append %>
          <%= search_button || render(Catalog::SearchButtonComponent.new(id: "#{@prefix}search", text: t('search.button.label'))) %>
        </div>
      <% end %>
    </div>
    <!-- render the listbox and options when there are autocomplete suggestions -->
    <ol role="listbox">
      <!-- use data-value when innerText is not the value to put into the search input value -->
      <li role="option" data-value="Typography"><mark>Typography</mark> in Title</li>
      <li role="option">The Fundamentals of <mark>Typography</mark></li>
      <li role="option">Giving type meaning : context and craft in <mark>typography</mark></li>
      <li role="option">Design elements <mark>typography</mark> fundamentals : a graphic style manual for understanding how typography affects design</li>
    </ol>
  </pennlibs-autocomplete>

  <% if advanced_search_enabled? %>
    <%= link_to t('search.advanced.label'), advanced_search_catalog_path %>
  <% end %>

  <%= link_to t('search.databases'), databases_catalog_path(sort: SearchBuilder::TITLE_SORT_ASC.join(',')) %>
</search>
